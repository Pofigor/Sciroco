function _typeof(e) { return (_typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === 'function' && e.constructor === Symbol && e !== Symbol.prototype ? 'symbol' : typeof e; })(e); }!(function (s) {
  const d = {
    filename: 'table.csv', appendTo: 'body', separator: ',', newline: '\n', quoteFields: !0, trimContent: !0, excludeColumns: '', excludeRows: '',
  }; let f = {}; s.fn.table2csv = function (e, t) {
    if (_typeof(e) === 'object' ? (t = e, e = 'download') : void 0 === e && (e = 'download'), typeof e !== 'string') throw new Error('"action" argument must be a string'); if (void 0 !== t && _typeof(t) !== 'object') throw new Error('"options" argument must be an object'); f = s.extend({}, d, t); const o = this.filter('table'); if (o.length <= 0) throw new Error('table2csv must be called on a <table> element'); if (o.length > 1) throw new Error('converting multiple table elements at once is not supported yet'); let r; let n; let i; let l; let a; let u; const c = (r = '', n = o.find('tr').not(f.excludeRows), i = n.first().find('td,th').filter(':visible').not(f.excludeColumns).length, n.each((e, t) => {
      s(t).find('td,th').filter(':visible').not(f.excludeColumns)
        .each((e, t) => { const o = s(t); const n = f.trimContent ? s.trim(o.text()) : o.text(); r += f.quoteFields ? `"${n.replace(/"/g, '""')}"` : n, r += e !== i - 1 ? f.separator : f.newline; });
    }), r); switch (e) { case 'download': l = f.filename, a = c, (u = document.createElement('a')).setAttribute('href', `data:text/csv;charset=utf-8,\ufeff${encodeURIComponent(a)}`), u.setAttribute('download', l), u.style.display = 'none', document.body.appendChild(u), u.click(), document.body.removeChild(u); break; case 'output': s(f.appendTo).append(s('<pre>').text(c)); break; case 'return': return c; default: throw new Error('"action" argument must be one of the supported action strings'); } return this;
  };
}(jQuery));
